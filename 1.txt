//UserController

import {
  Controller,
  Get,
  Post,
  Body,
  Query,
  Req,
  UseGuards,
  BadRequestException,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { Request } from 'express';
import { UserService } from '../services/user.service';
import { UserRegisterRequest } from '../dto/user-register-request.dto';
import { UserLoginRequest } from '../dto/user-login-request.dto';
import { UserAddRequest } from '../dto/user-add-request.dto';
import { DeleteRequest } from '../dto/delete-request.dto';
import { UserUpdateRequest } from '../dto/user-update-request.dto';
import { UserQueryRequest } from '../dto/user-query-request.dto';
import { User } from '../entities/user.entity';
import { UserVO } from '../vo/user.vo';
import { Roles } from '../decorators/roles.decorator';
import { RolesGuard } from '../guards/roles.guard';
import { UserConstant } from '../constants/user.constant';

@Controller('user')
export class UserController {
  constructor(private readonly userService: UserService) {}

  // region 登录相关

  /**
   * 用户注册
   */
  @Post('register')
  async userRegister(
    @Body() userRegisterRequest: UserRegisterRequest,
  ): Promise<{ code: number; data: number }> {
    if (!userRegisterRequest) {
      throw new BadRequestException('参数错误');
    }
    const { userName, userAccount, userPassword, checkPassword } = userRegisterRequest;
    if (!userAccount || !userPassword || !checkPassword) {
      throw new BadRequestException('参数错误');
    }
    const result = await this.userService.userRegister(
      userName,
      userAccount,
      userPassword,
      checkPassword,
      UserConstant.DEFAULT_ROLE,
    );
    return { code: 0, data: result };
  }

  /**
   * 用户登录
   */
  @Post('login')
  async userLogin(
    @Body() userLoginRequest: UserLoginRequest,
    @Req() req: Request,
  ): Promise<{ code: number; data: User }> {
    if (!userLoginRequest) {
      throw new BadRequestException('参数错误');
    }
    const { userAccount, userPassword } = userLoginRequest;
    if (!userAccount || !userPassword) {
      throw new BadRequestException('参数错误');
    }
    const user = await this.userService.userLogin(userAccount, userPassword, req);
    return { code: 0, data: user };
  }

  /**
   * 用户注销
   */
  @Post('logout')
  async userLogout(@Req() req: Request): Promise<{ code: number; data: boolean }> {
    if (!req) {
      throw new BadRequestException('参数错误');
    }
    const result = await this.userService.userLogout(req);
    return { code: 0, data: result };
  }

  /**
   * 获取当前登录用户
   */
  @Get('get/login')
  async getLoginUser(@Req() req: Request): Promise<{ code: number; data: UserVO }> {
    const user = await this.userService.getLoginUser(req);
    const userVO = new UserVO();
    Object.assign(userVO, user);
    return { code: 0, data: userVO };
  }

  // endregion

  // region 增删改查

  /**
   * 创建用户 (仅管理员)
   */
  @Post('add')
  @UseGuards(RolesGuard)
  @Roles(UserConstant.ADMIN_ROLE)
  async addUser(
    @Body() userAddRequest: UserAddRequest,
    @Req() req: Request,
  ): Promise<{ code: number; data: number }> {
    if (!userAddRequest) {
      throw new BadRequestException('参数错误');
    }
    const user = new User();
    Object.assign(user, userAddRequest);
    const result = await this.userService.save(user);
    if (!result) {
      throw new HttpException('操作失败', HttpStatus.INTERNAL_SERVER_ERROR);
    }
    return { code: 0, data: user.id };
  }

  /**
   * 删除用户 (仅管理员)
   */
  @Post('delete')
  @UseGuards(RolesGuard)
  @Roles(UserConstant.ADMIN_ROLE)
  async deleteUser(
    @Body() deleteRequest: DeleteRequest,
    @Req() req: Request,
  ): Promise<{ code: number; data: boolean }> {
    if (!deleteRequest || deleteRequest.id <= 0) {
      throw new BadRequestException('参数错误');
    }
    const result = await this.userService.removeById(deleteRequest.id);
    return { code: 0, data: result };
  }

  /**
   * 更新用户 (仅管理员)
   */
  @Post('update')
  @UseGuards(RolesGuard)
  @Roles(UserConstant.ADMIN_ROLE)
  async updateUser(
    @Body() userUpdateRequest: UserUpdateRequest,
    @Req() req: Request,
  ): Promise<{ code: number; data: boolean }> {
    if (!userUpdateRequest || !userUpdateRequest.id) {
      throw new BadRequestException('参数错误');
    }
    const user = new User();
    Object.assign(user, userUpdateRequest);
    const result = await this.userService.updateById(user);
    return { code: 0, data: result };
  }

  /**
   * 根据 id 获取用户 (仅管理员)
   */
  @Get('get')
  @UseGuards(RolesGuard)
  @Roles(UserConstant.ADMIN_ROLE)
  async getUserById(
    @Query('id') id: number,
    @Req() req: Request,
  ): Promise<{ code: number; data: UserVO }> {
    if (id <= 0) {
      throw new BadRequestException('参数错误');
    }
    const user = await this.userService.getById(id);
    const userVO = new UserVO();
    Object.assign(userVO, user);
    return { code: 0, data: userVO };
  }

  /**
   * 获取用户列表 (仅管理员)
   */
  @Get('list')
  @UseGuards(RolesGuard)
  @Roles(UserConstant.ADMIN_ROLE)
  async listUser(
    @Query() userQueryRequest: UserQueryRequest,
    @Req() req: Request,
  ): Promise<{ code: number; data: UserVO[] }> {
    const userQuery = new User();
    if (userQueryRequest) {
      Object.assign(userQuery, userQueryRequest);
    }
    // 此处可根据实际需要实现类似 MyBatis QueryWrapper 的功能
    const userList = await this.userService.list(userQuery);
    const userVOList = userList.map((user) => {
      const userVO = new UserVO();
      Object.assign(userVO, user);
      return userVO;
    });
    return { code: 0, data: userVOList };
  }

  /**
   * 分页获取用户列表 (仅管理员)
   */
  @Get('list/page')
  @UseGuards(RolesGuard)
  @Roles(UserConstant.ADMIN_ROLE)
  async listUserByPage(
    @Query() userQueryRequest: UserQueryRequest,
    @Req() req: Request,
  ): Promise<{ code: number; data: any }> {
    let current = 1;
    let size = 10;
    const userQuery = new User();
    if (userQueryRequest) {
      Object.assign(userQuery, userQueryRequest);
      current = userQueryRequest.current || 1;
      size = userQueryRequest.pageSize || 10;
    }
    // 假设 userService.page 返回形如 { current, size, total, records } 的分页对象
    const userPage = await this.userService.page(userQuery, current, size);
    const userVOList = userPage.records.map((user) => {
      const userVO = new UserVO();
      Object.assign(userVO, user);
      return userVO;
    });
    const userVOPage = {
      current: userPage.current,
      size: userPage.size,
      total: userPage.total,
      records: userVOList,
    };
    return { code: 0, data: userVOPage };
  }

  // endregion
}
